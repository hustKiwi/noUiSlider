{"name":"45分钟学会CoffeeScript","tagline":"Kiwi@2013.11.8","body":"# 45分钟学会\r\n\r\n            {\r\n         }   }   {\r\n        {   {  }  }\r\n         }   }{  {\r\n        {  }{  }  }                    _____       __  __\r\n       { }{ }{  { }                   / ____|     / _|/ _|\r\n     .- { { }  { }} -.               | |     ___ | |_| |_ ___  ___\r\n    (  { } { } { } }  )              | |    / _ \\|  _|  _/ _ \\/ _ \\\r\n    |`-..________ ..-'|              | |___| (_) | | | ||  __/  __/\r\n    |                 |               \\_____\\___/|_| |_| \\___|\\___|\r\n    |                 ;--.\r\n    |                (__  \\            _____           _       _\r\n    |                 | )  )          / ____|         (_)     | |\r\n    |                 |/  /          | (___   ___ _ __ _ _ __ | |_\r\n    |                 (  /            \\___ \\ / __| '__| | '_ \\| __|\r\n    |                 |/              ____) | (__| |  | | |_) | |_\r\n    |                 |              |_____/ \\___|_|  |_| .__/ \\__|\r\n     `-.._________..-'                                  | |\r\n                                                        |_|\r\n\r\n\r\n## 背景\r\n> CoffeeScript is a little language that compiles into JavaScript.\r\n\r\n![CoffeeScript, TypeScript, and Dart](http://www.geekpics.net/images/2013/11/07/2BF6P.png)\r\n\r\n> The golden rule of CoffeeScript is: \"*It's just JavaScript*\".\r\n\r\n* [Dart、CoffeeScript、TypeScript和JavaScript哪种最适合专门学习](http://www.zhihu.com/question/20833518)\r\n* [A quick look at CoffeeScript, TypeScript, and Dart](http://128bitstudios.com/2013/08/11/a-quick-look-at-coffeescript-typescript-and-dart/)\r\n\r\n> CoffeeScript has been around for a bit now, made by Jeremy Ashkenas (Same person behind Backbone.js and Underscore.js) in 2009. The syntax looks like a mix of Ruby and Python and tends to draw people with a background in those languages. CoffeeScript keeps JavaScript’s best practices in mind but offers a better syntax usually with much less code.\r\n\r\n![JS: The Definitive Guide VS The Good Parts](http://farm5.staticflickr.com/4066/4704268314_bb0e9d0ff3_z.jpg)\r\n\r\n\r\n## 引入\r\n实现一个非法song ids过滤的function\r\n```javascript\r\nvar format = function(sids) {\r\n  return $.isArray(sids) && (function() {\r\n    var r = [];\r\n    for (var i = 0, l = sids.length; i < l; i++) {\r\n      var sid = sids[i];\r\n      if (sid) {\r\n        r.push('' + sid);\r\n      }\r\n    }\r\n    return r;\r\n  })() || '' + sids;    \r\n};\r\n```\r\n```coffeescript\r\nformatSid = (sids) ->\r\n  $.isArray(sids) and ('' + sid for sid in sids when sid) or '' + sids\r\n```\r\n\r\n```javascript\r\nif (typeof console !== \"undefined\" && console !== null) {\r\n  if (typeof console.debug === 'function') {\r\n    console.debug(msg);\r\n  }\r\n}\r\n```\r\n```coffeescript\r\nconsole?.debug?(msg)\r\n```\r\n\r\n\r\n## 基础语法\r\n### 注释\r\n```coffeescript\r\n# 单行注释\r\n###\r\n多行注释或LICENCE\r\n###\r\n```\r\n\r\n### 变量及作用域\r\n> The CoffeeScript compiler takes care to make sure that all of your variables are properly declared within lexical scope — you never need to write  var yourself.\r\n\r\n```coffeescript\r\nouter = 1\r\nchangeNumbers = ->\r\n  inner = -1\r\n  outer = 10\r\ninner = changeNumbers()\r\n```\r\n```javascript\r\nvar changeNumbers, inner, outer;\r\n\r\nouter = 1;\r\n\r\nchangeNumbers = function() {\r\n  var inner;\r\n  inner = -1;\r\n  return outer = 10;\r\n};\r\n\r\ninner = changeNumbers();\r\n```\r\n\r\n### 函数\r\n```coffeescript\r\nfill = (container, liquid = \"coffee\") ->\r\n  \"Filling the #{container} with #{liquid}...\"\r\n```\r\n```javascript\r\nvar fill;\r\n\r\nfill = function(container, liquid) {\r\n  if (liquid == null) {\r\n    liquid = \"coffee\";\r\n  }\r\n  return \"Filling the \" + container + \" with \" + liquid + \"...\";\r\n};\r\n```\r\n\r\n```coffeescript\r\ntrigger = @trigger\r\n\r\n@trigger = (events...) =>\r\n  if @_isEmptyMp3()\r\n    trigger.apply(@, e for e in events when not e.startsWith('player:'))\r\n  else\r\n    trigger.apply @, events\r\n```\r\n```javascript\r\nvar trigger,\r\n  _this = this,\r\n  __slice = [].slice;\r\n\r\ntrigger = this.trigger;\r\n\r\nthis.trigger = function() {\r\n  var e, events;\r\n  events = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\r\n  if (_this._isEmptyMp3()) {\r\n    return trigger.apply(_this, (function() {\r\n      var _i, _len, _results;\r\n      _results = [];\r\n      for (_i = 0, _len = events.length; _i < _len; _i++) {\r\n        e = events[_i];\r\n        if (!e.startsWith('player:')) {\r\n          _results.push(e);\r\n        }\r\n      }\r\n      return _results;\r\n    })());\r\n  } else {\r\n    return trigger.apply(_this, events);\r\n  }\r\n};\r\n```\r\n\r\n### 对象与数组\r\n```coffeescript\r\nobject1 = {one: 1, two: 2}\r\n\r\nobject2 = one: 1, two: 2\r\n\r\nobject3 =\r\n  one: 1\r\n  two: 2\r\n```\r\n\r\n```coffeescript\r\nbitlist = [\r\n  1, 0, 1\r\n  0, 0, 1\r\n  1, 1, 0,\r\n]\r\n\r\nstart = numbers[0..2]\r\nmiddle = numbers[3...6]\r\nend = numbers[6..]\r\ncopy = numbers[..]\r\n\r\nnumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nnumbers[3..6] = [-3, -4, -5, -6]\r\n```\r\n```javascript\r\nstart = numbers.slice(0, 3);\r\nmiddle = numbers.slice(3, 6);\r\nend = numbers.slice(6);\r\ncopy = numbers.slice(0);\r\n\r\nvar numbers;\r\nnumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n[].splice.apply(numbers, [3, 4].concat([-3, -4, -5, -6]));\r\n```\r\n\r\n### 流程控制\r\n```coffeescript\r\nalert if score >= 60 then 'Pass' else 'Fail'\r\n\r\nalert \"It's cold!\" if Temp < 5\r\n\r\nif not true then 'Panic'\r\nunless true\r\n  'Panic'\r\n```\r\n```javascript\r\nalert(score >= 60 ? 'Pass' : 'Fail');\r\n\r\nif (Temp < 5) {\r\n  alert(\"It's cold!\");\r\n}\r\n\r\nif (!true) {\r\n  'Panic';\r\n}\r\n\r\nif (!true) {\r\n  'Panic';\r\n}\r\n```\r\n\r\n```coffeescript\r\nnext: ->\r\n  list = @list\r\n  i = $.inArray(this.cur, list)\r\n  l = list.length\r\n  next = i + 1\r\n  loopNext = ->\r\n    next = 0 if i is l - 1\r\n\r\n  switch @mode\r\n    when 'single' then next = i\r\n    when 'random' then next = utils.random(0, l - 1)\r\n    when 'loop'\r\n      loopNext()\r\n    else\r\n      loopNext()\r\n\r\n  @cur = list[next]\r\n```\r\n```javascript\r\nswitch (this.mode) {\r\n  case 'single':\r\n    next = i;\r\n    break;\r\n  case 'random':\r\n    next = utils.random(0, l - 1);\r\n    break;\r\n  case 'loop':\r\n    loopNext();\r\n    break;\r\n  default:\r\n    loopNext();\r\n}\r\n```\r\n\r\n惯例用法\r\n<table>\r\n <tr>\r\n   <td><b>CoffeeScript</b></td>\r\n   <td><b>Javascript</b></td>\r\n </tr>\r\n <tr>\r\n   <td>is</td>\r\n   <td>===</td>\r\n </tr>\r\n <tr>\r\n   <td>isnt</td>\r\n   <td>!==</td>\r\n </tr>\r\n <tr>\r\n   <td>not</td>\r\n   <td>!</td>\r\n </tr>\r\n <tr>\r\n   <td>and</td>\r\n   <td>&&</td>\r\n </tr>\r\n <tr>\r\n   <td>or</td>\r\n   <td>||</td>\r\n </tr>\r\n <tr>\r\n   <td>true, yes, on</td>\r\n   <td>true</td>\r\n </tr>\r\n <tr>\r\n   <td>false, no, off</td>\r\n   <td>false</td>\r\n </tr>\r\n <tr>\r\n   <td>@, this</td>\r\n   <td>this</td>\r\n </tr>\r\n <tr>\r\n   <td>of(To use 'of' to test for JavaScript object-key presence)</td>\r\n   <td>in</td>\r\n </tr>\r\n <tr>\r\n   <td>in(To use 'in' to test for array presence)</td>\r\n   <td>no JS equivalent(likely indexOf)</td>\r\n </tr>\r\n</table>\r\n\r\n### 循环和推导式\r\n```coffeescript\r\nfor num in [10..1]\r\n  countdown = num\r\n\r\nevens = (x for x in [0..10] by 2)\r\n\r\ncourses = ['greens', 'caviar', 'truffles', 'roast', 'cake']\r\nmenu i + 1, dish for dish, i in courses when dish isnt 'roast'\r\n```\r\n```javascript\r\nvar courses, dish, i, _i, _len;\r\n\r\ncourses = ['greens', 'caviar', 'truffles', 'roast', 'cake'];\r\n\r\nfor (i = _i = 0, _len = courses.length; _i < _len; i = ++_i) {\r\n  dish = courses[i];\r\n  if (dish !== 'roast') {\r\n    menu(i + 1, dish);\r\n  }\r\n}\r\n```\r\n\r\n```coffeescript\r\nnum = 5\r\nlyc = while --num\r\n   'La'\r\n   \r\nnum = 5\r\nlyc = until --num is 0\r\n   'La'\r\n```\r\n```javascript\r\nvar lyc, num;\r\n\r\nnum = 5;\r\n\r\nlyc = (function() {\r\n  var _results;\r\n  _results = [];\r\n  while (--num) {\r\n    _results.push('La');\r\n  }\r\n  return _results;\r\n})();\r\n```\r\n\r\n### 类的定义和继承\r\n* [Introduction to Object-Oriented JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript)\r\n* [Javascript定义类（class）的三种方法](http://www.ruanyifeng.com/blog/2012/07/three_ways_to_define_a_javascript_class.html)\r\n\r\n```coffeescript\r\nclass Animal\r\n  constructor: (name) ->\r\n    @name = name\r\n\r\n  move: (meters) ->\r\n    alert @name + \" moved #{meters}m.\"\r\n\r\nclass Snake extends Animal\r\n  move: ->\r\n    alert \"Slithering...\"\r\n    super 5\r\n\r\nclass Horse extends Animal\r\n  move: ->\r\n    alert \"Galloping...\"\r\n    super 45\r\n    \r\nsam = new Snake('Sammy the Python')\r\ntom = new Horse('Tommy the Palomino')\r\n\r\nsam.move()\r\ntom.move()\r\n```\r\n\r\n```coffeescript\r\nAnimal::canFly = ->\r\n  @_hasWing\r\n```\r\n```javascript\r\nAnimal.prototype.canFly = function() {\r\n  return this._hasWing;\r\n};\r\n```\r\n\r\n### 析构/解析赋值（Destructuring Assignment）\r\n```coffeescript\r\n[a, b] = [1, 2]\r\n\r\n{join, resolve} = require('path')\r\n````\r\n```javascript\r\nvar a, b, _ref;\r\n_ref = [1, 2], a = _ref[0], b = _ref[1];\r\n```\r\n\r\n```coffeescript\r\nfuturists =\r\n  sculptor: \"Umberto Boccioni\"\r\n  painter:  \"Vladimir Burliuk\"\r\n  poet:\r\n    name:   \"F.T. Marinetti\"\r\n    address: [\r\n      \"Via Roma 42R\"\r\n      \"Bellagio, Italy 22021\"\r\n    ]\r\n\r\n{poet: {name, address: [street, city]}} = futurists\r\n```\r\n\r\n### 闭包函数\r\n```coffeescript\r\ndo ->\r\n  alert('run immediately')\r\n```\r\n```javascript\r\n(function() {\r\n  return alert('run immediately');\r\n})();\r\n```\r\n\r\n```coffeescript\r\ndo (root = this, factory = (cfg) ->\r\n  # content\r\n) ->\r\n    if typeof exports is 'object'\r\n        module.exports = factory()\r\n    else if typeof define is 'function' and define.amd\r\n        define(['_m_player/core/cfg'], factory)\r\n    else\r\n        root._m.player.utils = factory(root._m.player.cfg)\r\n```\r\n```javascript\r\n(function(root, factory) {\r\n  if (typeof exports === 'object') {\r\n    return module.exports = factory();\r\n  } else if (typeof define === 'function' && define.amd) {\r\n    return define(['_m_player/core/cfg'], factory);\r\n  } else {\r\n    return root._m.player.utils = factory(root._m.player.cfg);\r\n  }\r\n})(this, function(cfg) {});\r\n```\r\n\r\n\r\n## 随堂作业\r\n创建一个jQuery插件（如$.fn.list），使其配合样式对列表实现hover效果（即对li标签模拟a标签的:hover响应）。示例如下：\r\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/IKiVOru/1/embed?html,css,output\">JS Bin</a><script src=\"http://static.jsbin.com/js/embed.js\"></script>\r\n\r\n\r\n## 课外参考\r\n* [CoffeeScript官网](http://coffeescript.org/)\r\n* [CoffeeScript小书](http://read.douban.com/ebook/198648/)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}